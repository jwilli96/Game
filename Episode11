Display.java
package com.game.gamefront;

import java.awt.Canvas;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import com.game.gamefront.graphics.Render;
import com.game.gamefront.graphics.Screen;

public class Display extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;

	public static final int WIDTH = 1280;
	public static final int HEIGHT = 720;
	public static final String TITLE = "Game Title";

	private Thread thread;
	private Screen screen;
	private Game game;
	private BufferedImage img;
	private boolean running = false;
	private int[] pixels;
	
	public Display() {
		//Allows to put width and height into 1 object
		Dimension size = new Dimension(WIDTH, HEIGHT);
		setPreferredSize(size);
		setMinimumSize(size);
		setMaximumSize(size);
		screen = new Screen(WIDTH, HEIGHT);
		game = new Game();
		img = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		pixels = ((DataBufferInt)img.getRaster().getDataBuffer()).getData();
	}

	private void start() {
		if (running) {
			return;
		}
		running = true;
		thread = new Thread(this);
		thread.start();

	}
	private void stop() {
		if (!running){
			return;
		}
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
			System.exit(0);
		}
	}
	public void run() {
		int frames = 0;
		double unprocessedSeconds = 0;
		long previousTime = System.nanoTime();
		double secondsPerTick = 1 / 60.0;
		int tickCount = 0;
		boolean ticked = false;
		
		while (running) {
			long currentTime = System.nanoTime();
			long passedTime = currentTime - previousTime;
			previousTime = currentTime;
			unprocessedSeconds += passedTime / 1000000000.0;
			
			while (unprocessedSeconds > secondsPerTick) {
				tick();
				unprocessedSeconds -= secondsPerTick;
				ticked = true;
				tickCount++;
				if (tickCount % 60 == 0) {
					System.out.println(frames + "fps");
					previousTime += 1000;
					frames = 0;
				}
			}
			if (ticked) {
				render();
				frames++;
			}
			render();
			frames++;
		}
	}
	
	private void tick() {
		game.tick();
	}
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}
		screen.render(game);
		
		for (int i = 0; i < WIDTH * HEIGHT; i++) {
			pixels[i] = screen.pixels[i];
		}
		Graphics g = bs.getDrawGraphics();
		g.drawImage(img, 0, 0, WIDTH, HEIGHT, null);
		g.dispose();
		bs.show();
		
	}
	public static void main(String[] args) {
		Display game = new Display();
		JFrame frame = new JFrame();

		frame.add(game);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(WIDTH, HEIGHT);
		frame.setLocationRelativeTo(null);
		frame.setResizable(true);
		frame.setVisible(true);
		frame.setTitle(TITLE);
		
		game.start();
	}

}
Render.java
package com.game.gamefront.graphics;

public class Render {
	public final int width;
	public final int height;
	public final int[] pixels;

	public Render(int width, int height) {
		this.width = width;
		this.height = height;
		pixels = new int[width * height];
	}

	public void draw(Render render, int xOffset, int yOffset) {
		for (int y = 0; y < render.height; y++) {
			int yPix = y + yOffset;
			if (yPix < 0 || yPix >= height)
				continue;
			for (int x = 0; x < render.width; x++) {
				int xPix = x + xOffset;
				if (xPix < 0 || xPix >= width)
					continue;

				int alpha = render.pixels[x + y * render.width];
				//This allows us to generate pixels without any data
				if (alpha > 0) {
					pixels[xPix + yPix * width] = alpha;
				}

			}
		}
	}

}
Screen.java
package com.game.gamefront.graphics;

import java.util.Random;

import com.game.gamefront.Game;

public class Screen extends Render{
	
	private Render test;
	private Render3D render;

	public Screen(int width, int height) {
		super(width, height);
		Random random = new Random();
		render = new Render3D(width, height);
		test = new Render(256, 256);
		for (int i = 0; i < 256*256; i++) {
			test.pixels[i] = random.nextInt();
		}
		
	}
	public void render(Game game) {
		for (int i = 0; i < width * height; i++) {
			pixels[i] = 0;
		}
		
		render.floor(game);
		draw(render, 0, 0);
	}

}
Game.java
package com.game.gamefront;

public class Game {
	public int time;
	
	public void tick() {
		time++;
	}

}
Render3D.java
package com.game.gamefront.graphics;

import com.game.gamefront.Game;

public class Render3D extends Render {
	public Render3D(int width, int height) {
		super(width, height);
	}

	// mine 16:53 episode 11

	public void floor(Game game) {
		
		double floorPosition = 8;
		//Increase celingposition to make the ceiling higher
		double ceilingPosition = 8;
		double forward = game.time/50;
		double right = game.time/10;
		double rotation = 0;

		// sine and cosine f(x) mirror each other to form a circle which animates the picture smoothly.

		double cosine = Math.cos(rotation);
		double sine = Math.sin(rotation);
		
		for (int y = 0; y < height; y++) {
			double ceiling = (y - height / 2.0) / height;
			
			double z = floorPosition / ceiling;
			
			//fix ceiling and floor are moving different direction
			if (ceiling < 0) {
				z = ceilingPosition / -ceiling;
			}
			

			for (int x = 0; x < width; x++) {
				double depth = (x - width / 2.0) / height;
				depth *= z;
				double xx = depth * cosine + z * sine + right;
				double yy = z * cosine - depth * sine + forward;
				int Xpix = (int) xx;
				int Ypix = (int) yy;
				//using the array of pixels to assign the value of xx
				pixels[x + y * width] = ((Xpix & 15) * 16) | ((Ypix & 15) * 16) << 8;


			}
		}
	}
}
