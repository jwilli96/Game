Display.java
package com.game.gamefront;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import com.game.gamefront.graphics.Controller;
import com.game.gamefront.graphics.Screen;
import com.game.gamefront.input.InputHandler;

public class Display extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;

	public static final int WIDTH = 1280;
	public static final int HEIGHT = 720;
	public static final String TITLE = "Game Title";

	private Thread thread;
	private Screen screen;
	private Game game;
	private BufferedImage img;
	private boolean running = false;
	private int[] pixels;
	private InputHandler input;
	private int newX = 0;
	private int oldX = 0;
	private int fps;

	public Display() {
		// Allows to put width and height into 1 object
		Dimension size = new Dimension(WIDTH, HEIGHT);
		setPreferredSize(size);
		setMinimumSize(size);
		setMaximumSize(size);
		screen = new Screen(WIDTH, HEIGHT);
		game = new Game();
		img = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		pixels = ((DataBufferInt) img.getRaster().getDataBuffer()).getData();

		input = new InputHandler();
		addKeyListener(input);
		addFocusListener(input);
		addMouseListener(input);
		addMouseMotionListener(input);
	}

	private void start() {
		if (running) {
			return;
		}
		running = true;
		thread = new Thread(this);
		thread.start();

	}

	private void stop() {
		if (!running) {
			return;
		}
		running = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
			System.exit(0);
		}
	}

	public void run() {
		int frames = 0;
		double unprocessedSeconds = 0;
		long previousTime = System.nanoTime();
		double secondsPerTick = 1 / 60.0;
		int tickCount = 0;
		boolean ticked = false;

		while (running) {
			long currentTime = System.nanoTime();
			long passedTime = currentTime - previousTime;
			previousTime = currentTime;
			unprocessedSeconds += passedTime / 1000000000.0;
			requestFocus();

			while (unprocessedSeconds > secondsPerTick) {
				tick();
				unprocessedSeconds -= secondsPerTick;
				ticked = true;
				tickCount++;
				if (tickCount % 60 == 0) {
					System.out.println(frames + "fps");
					fps = frames;
					previousTime += 1000;
					frames = 0;
				}
			}
			if (ticked) {
				render();
				frames++;
			}
			render();
			frames++;
			newX = InputHandler.MouseX;
			if (newX > oldX) {
				System.out.println("Right");
				Controller.turnRight = true;
			}
			if (newX < oldX) {
				System.out.println("Left");
				Controller.turnLeft = true;
			}
			if (newX == oldX) {
				System.out.println("Not moving");
				Controller.turnLeft = false;
				Controller.turnRight = false;
			}
			oldX = newX;

			// newY = InputHandler.MouseY;

			// Display where the mouse is
			// System.out.println("X: " + InputHandler.MouseX + "Y: " +
			// InputHandler.MouseY);
		}
	}

	private void tick() {
		game.tick(input.key);
	}

	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			createBufferStrategy(3);
			return;
		}
		screen.render(game);

		for (int i = 0; i < WIDTH * HEIGHT; i++) {
			pixels[i] = screen.pixels[i];
		}
		Graphics g = bs.getDrawGraphics();
		g.drawImage(img, 0, 0, WIDTH, HEIGHT, null);
		g.setFont(new Font("Verdana", 0, 50));
		g.setColor(Color.cyan);
		// Draw the FPS counter in top LHS of the screen
		g.drawString(fps + "FPS", 20, 50);
		g.dispose();
		bs.show();

	}

	public static void main(String[] args) {
		BufferedImage cursor = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);
		Cursor blank = Toolkit.getDefaultToolkit().createCustomCursor(cursor, new Point(0, 0), "blank");
		Display game = new Display();
		JFrame frame = new JFrame();

		frame.add(game);
		frame.getContentPane().setCursor(blank);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(WIDTH, HEIGHT);
		frame.setLocationRelativeTo(null);
		frame.setResizable(true);
		frame.setVisible(true);
		frame.setTitle(TITLE);

		game.start();
	}

}
Screenjava.
package com.game.gamefront.graphics;

import java.util.Random;

import com.game.gamefront.Game;

public class Screen extends Render {

	private Render test;
	private Render3D render;

	public Screen(int width, int height) {
		super(width, height);
		Random random = new Random();
		render = new Render3D(width, height);
		test = new Render(256, 256);
		for (int i = 0; i < 256 * 256; i++) {
			test.pixels[i] = random.nextInt();
		}

	}

	public void render(Game game) {
		for (int i = 0; i < width * height; i++) {
			pixels[i] = 0;
		}

		render.floor(game);
		render.RenderDistanceListener();
		draw(render, 0, 0);
	}

}
Render.java
package com.game.gamefront.graphics;

public class Render {
	public final int width;
	public final int height;
	public final int[] pixels;

	// Constructor
	public Render(int width, int height) {
		this.width = width;
		this.height = height;
		pixels = new int[width * height];
	}

	public void draw(Render render1, int xOffset, int yOffset) {
		for (int y = 0; y < render1.height; y++) {
			int yPix = y + yOffset;
			if (yPix < 0 || yPix >= height)
				continue;
			for (int x = 0; x < render1.width; x++) {
				int xPix = x + xOffset;
				if (xPix < 0 || xPix >= width)
					continue;

				int alpha = render1.pixels[x + y * render1.width];
				// This allows us to generate pixels without any data
				if (alpha > 0) {
					pixels[xPix + yPix * width] = alpha;
				}

			}
		}
	}

}
Render3D.java
package com.game.gamefront.graphics;

import java.util.Random;

import com.game.gamefront.Game;

public class Render3D extends Render {

	public double[] zBuffer;
	public double renderDistance = 5000;

	public Render3D(int width, int height) {
		super(width, height);
		// xBuffer managed increasing fps by reducing the amount of pixels being
		// rendered
		zBuffer = new double[width * height];
	}

	// mine 16:53 episode 11

	public void floor(Game game) {

		double floorPosition = 8;
		// Increase celingposition to make the ceiling higher
		double ceilingPosition = 8;
		double forward = game.time % 100 / 20.0;
		double right = game.controls.x;
		double rotation = game.controls.rotation;
		double up = game.controls.y;
		double walking = Math.sin(game.time / 6.0) * 0.5;

		if (Controller.crouchWalk) {
			walking = Math.sin(game.time / 6.0) * 0.2;
		}
		if (Controller.runWalk) {
			walking = Math.sin(game.time / 6.0) * 0.8;
		}

		// sine and cosine f(x) mirror each other to form a circle which animates the
		// picture smoothly.

		double cosine = Math.cos(rotation);
		double sine = Math.sin(rotation);

		for (int y = 0; y < height; y++) {
			double ceiling = (y + -height / 2.0) / height;

			double z = (floorPosition + up) / ceiling;
			if (Controller.walk) {
				z = (floorPosition + up + walking) / ceiling;
			}

			// fix ceiling and floor are moving different direction
			if (ceiling < 0) {
				z = (ceilingPosition - up) / -ceiling;
				if (Controller.walk) {
					z = (ceilingPosition - up - walking) / -ceiling;
				}
			}

			for (int x = 0; x < width; x++) {
				double depth = (x - width / 2.0) / height;
				depth *= z;
				double xx = depth * cosine + z * sine;
				double yy = z * cosine - depth * sine;
				int Xpix = (int) (xx + right);
				int Ypix = (int) (yy + forward);
				zBuffer[x + y * width] = z;
				// using the array of pixels to assign the value of xx
				// multiple by 8 which is the size of the image in png file
				pixels[x + y * width] = Texture.floor.pixels[(Xpix & 7) + (Ypix & 7) * 8];

				if (z > 500) {
					pixels[x + y * width] = 0;
				}
			}
		}
		Random random = new Random(100);
		for (int i = 0; i < 100000; i++) {
			double xx = random.nextDouble();
			double yy = random.nextDouble();
			double zz = 2 - forward / 16; //determines the starting point. greater zz the higher the pixels start

			int xPixel = (int) (xx / zz * height / 2 + width / 2);
			int yPixel = (int) (yy / zz * height / 2 + height / 2);
			// only render (use processing power) if it is on the sceen. i.e 600 (width) x
			// 800 (height)
			if (xPixel > 0 && yPixel > 0 && xPixel < width && yPixel < height) {
				// (10,10) cordinate is assigned colour value 1
				pixels[xPixel + yPixel * width] = 0xfffff;
			}
		}

	}

	public void RenderDistanceListener() {
		for (int i = 0; i < width * height; i++) {
			int colour = pixels[i];
			int brightness = (int) (renderDistance / (zBuffer[i]));

			// in graphics the bounds for brightness are 0-355
			if (brightness < 0) {
				brightness = 0;
			}
			if (brightness > 255) {
				brightness = 255;
			}

			int r = (colour >> 16) & 0xff;
			// green value
			int g = (colour >> 8) & 0xff;
			int b = (colour) & 0xff;

			r = r * brightness / 255;
			g = g * brightness / 255;
			b = b * brightness / 255;

			pixels[i] = r << 16 | g << 8 | b;

		}
	}
}
Game.java
package com.game.gamefront;

import java.awt.event.KeyEvent;

import com.game.gamefront.graphics.Controller;

public class Game {
	public int time;
	public Controller controls;

	public Game() {
		controls = new Controller();
	}

	public void tick(boolean[] key) {
		time++;
		boolean forward = key[KeyEvent.VK_W];
		boolean back = key[KeyEvent.VK_S];
		boolean left = key[KeyEvent.VK_A];
		boolean right = key[KeyEvent.VK_D];
		boolean jump = key[KeyEvent.VK_SPACE];
		boolean crouch = key[KeyEvent.VK_CONTROL];
		boolean run = key[KeyEvent.VK_SHIFT];

		controls.tick(forward, back, left, right, jump, crouch, run);
	}

}
Controller.java
package com.game.gamefront.graphics;

public class Controller {
	public double x, y, z, rotation, xa, za, rotationa;
	public static boolean turnLeft = false;
	public static boolean turnRight = false;
	public static boolean run = false;
	public static boolean walk = false;
	public static boolean crouchWalk = false;
	public static boolean runWalk = false;

	public void tick(boolean forward, boolean back, boolean left, boolean right, boolean jump, boolean crouch,
			boolean run) {
		double rotationSpeed = 0.025;
		double walkSpeed = 0.5;
		double jumpHeight = 0.5;
		double crouchHeight = 0.33;
		double xMove = 0;
		double zMove = 0;

		if (forward) {
			zMove++;
			walk = true;
		}
		if (back) {
			zMove--;
			walk = true;
		}
		if (left) {
			xMove--;
			walk = true;
		}
		if (right) {
			xMove++;
			walk = true;
		}
		if (turnLeft) {
			rotationa -= rotationSpeed;
			walk = true;
		}
		if (turnRight) {
			rotationa += rotationSpeed;
			walk = true;
		}
		if (jump) {
			y += jumpHeight;
			run = false;
		}
		if (crouch) {
			y -= crouchHeight;
			run = false;
			crouchWalk = true;
			walkSpeed = 0.2;
		}
		if (run) {
			walkSpeed = 1;
			walk = true;
			runWalk = true;
		}
		if (!forward && !back && !left && !right && !turnLeft && !turnRight) {
			walk = false;
		}
		if (!crouch) {
			crouchWalk = false;
		}
		if (!run) {
			runWalk = false;
		}
		xa += (xMove * Math.cos(rotation) + zMove * Math.sin(rotation)) * walkSpeed;
		za += (zMove * Math.cos(rotation) + xMove * Math.sin(rotation)) * walkSpeed;

		// x is left and right

		x += xa;
		y *= 0.9;
		z += za;
		xa *= 0.1;
		za *= 0.1;
		rotation += rotationa;
		rotationa *= 0.5;

	}
}
Texture.java
package com.game.gamefront.graphics;

import java.awt.image.BufferedImage;
import java.io.FileInputStream; // Add this import statement

import javax.imageio.ImageIO;

public class Texture {
	public static Render floor = loadBitMap("res/textures/floor.png");

	public static Render loadBitMap(String filename) {
		try {
			BufferedImage image = ImageIO.read(new FileInputStream(filename));

			if (image == null) {
				System.out.println("Failed to load image: " + filename);
				throw new RuntimeException("Image not found or could not be loaded.");
			}

			int width = image.getWidth();
			int height = image.getHeight();
			Render result = new Render(width, height);
			image.getRGB(0, 0, width, height, result.pixels, 0, width);
			return result;

		} catch (Exception e) {
			System.out.println("CRASH");
			throw new RuntimeException(e);

		}
	}
}
